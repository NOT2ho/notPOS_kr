{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import fs from 'fs'\r\nimport path from 'path';\r\nimport { fileURLToPath } from 'url';\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\n\r\nclass Node {\r\n    child: Map<string, Node>;\r\n    output: string[][]\r\n    fail: null | Node\r\n    end : boolean\r\n    \r\n    constructor() {\r\n        this.child = new Map()\r\n        this.output = []\r\n        this.fail = null\r\n        this.end = false\r\n    }\r\n}\r\n\r\nclass AhoCorasick {\r\n    root: Node\r\n    constructor() {\r\n        this.root = new Node();\r\n    }\r\n\r\n    insert(words: string[]) {\r\n        let output = words\r\n        let word = words[0]\r\n        let node = this.root;\r\n        for (const char of word) {\r\n            if (!node.child.get(char))\r\n                node.child.set(char, new Node());\r\n            node = node.child.get(char) || this.root;\r\n        }\r\n        node.output.push(output);\r\n        node.end = true\r\n    }\r\n\r\n\r\n    fail() {\r\n        const que : Node[] = []\r\n        for (const [i, c] of this.root.child.entries()) {\r\n            c.fail = this.root;\r\n            que.push(c);\r\n          \r\n            while (que.length > 0) {\r\n                const currentNode = que.shift();\r\n                if (typeof currentNode === undefined)\r\n                    break;\r\n                            \r\n                for (const i in currentNode?.child) {\r\n                    const nextNode = currentNode?.child.get(i);\r\n\r\n                    if (nextNode == null)\r\n                        continue;\r\n                \r\n                    que.push(nextNode);\r\n\r\n                    let failNode = currentNode.fail;\r\n\r\n                    while (failNode !== null && !failNode.child.get(i)) {\r\n                        failNode = failNode.fail;\r\n                    }\r\n                \r\n                    if (currentNode != this.root)\r\n                        nextNode.fail = failNode ? failNode.child.get(i) || this.root : this.root;\r\n\r\n                    if (nextNode.fail !== null)\r\n                        nextNode.output = nextNode.output.concat(nextNode.fail.output);\r\n                }\r\n        \r\n            }\r\n        }\r\n    }\r\n\r\n    search(input: string) : Map<number, string[][]> {\r\n        this.fail();\r\n        let text = input;\r\n        let result : Map<number, string[][]> = new Map();\r\n        let currentNode : Node | null = this.root;\r\n        for (let i = 0; i < text.length; i++) {\r\n            const char = text[i];\r\n\r\n            while (currentNode !== null && !currentNode.child.get(char)) {\r\n                currentNode = currentNode.fail;\r\n            }\r\n    \r\n            currentNode = currentNode ? currentNode.child.get(char) || this.root : this.root;\r\n        \r\n            for (const output of currentNode.output) {\r\n                let resultArray = result.get(i - output[0].length + 1) || [];\r\n                resultArray.push(output);\r\n                result.set(i - output[0].length + 1, resultArray);\r\n            }   \r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\nclass Pos {\r\n    preprocess = (text: string) => {\r\n        const str = text.replace(/([^\uAC00-\uD7A3a-zA-Z]*)/, \" \")\r\n        const undefArr = str.split(' ')\r\n        const arr = undefArr.splice(1, undefArr.length)\r\n        return arr.toString();\r\n    }\r\n\r\n    tag = (text: string) => {\r\n        const ac = new AhoCorasick();\r\n        let res : Map<number, string[][]> = new Map();\r\n        try {\r\n            const notpos = new RegExp(/^(?:.*[\\\\\\/])?notpos_kr(?:[\\\\\\/]*)$/);\r\n       \r\n            \r\n            const rec = (filepath: string) => {\r\n                if (notpos.test(filepath) || filepath == process.cwd())\r\n                     return (path.join(filepath, 'dic/dic.csv'))\r\n                return rec(path.join(filepath, '..'))\r\n            }\r\n            \r\n            const data = fs.readFileSync(rec(__dirname))\r\n            const pd = data.toString().split('\\n');\r\n\r\n            for (let i of pd) {\r\n                let word = i.slice(0, -1).split(',');\r\n                ac.insert(word);\r\n            }\r\n            res = ac.search(text);\r\n\r\n            const result : Map<number, string[]> = new Map();\r\n            for (let [i, x] of res.entries()) {\r\n                const resultArray = x[x.length - 1] || [];\r\n                result.set(i, resultArray);\r\n            }\r\n       \r\n            let idx = 0\r\n            let key = 0\r\n            let ret : Map<number, string[]> = new Map();\r\n            let keys = Array.from(result.keys());\r\n            for (let s of text)\r\n            {\r\n                if (idx >= text.length) break;\r\n                key = keys[idx];\r\n                const resv = result.get(idx) || []\r\n                if (resv.length == 0) {\r\n                    if (text[idx] != ' ') {\r\n                        ret.set(idx, [text[idx], 'UNK']);\r\n                    }\r\n                    idx++;\r\n                } else {\r\n                    ret.set(idx, resv);\r\n                    idx += resv[0].length;\r\n                }\r\n            }\r\n                \r\n            return Array.from(ret.values());\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n}\r\n\r\nexport {Pos}"],
  "mappings": "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",
  "names": ["i"]
}
